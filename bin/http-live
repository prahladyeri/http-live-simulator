#! /usr/bin/env node
/**
 * HTTP Live Simulator
 *
 * @author Prahlad Yeri<prahladyeri@yahoo.com>
 * @description Simulate HTTP Delays on your local machine.
 * @license MIT
 * */

const http = require('http');
const url = require('url');
const fs  = require('fs');
const path = require('path');
const signale = require('signale');
const { entryFiles, defaultOptions } = require('../lib/config');
const util = require('../lib/util');
const cliOptions = require('../lib/cli');
const options = Object.assign({}, defaultOptions, cliOptions);

if (options.minDelay > options.maxDelay) {
  signale.error("Minimum delay cannot be greater than maximum delay.");
  console.error(options);
  return;
}

const server = http.createServer((req, res) => {
  let pathname = url.parse(req.url, true).pathname;
  let absPath = '';
  const delay = util.getRandomDelay(options.minDelay, options.maxDelay);

  util.sleep(delay)
    .then(() => {
      if (pathname === '/') {
        for (let i = 0; i < entryFiles.length; i++) {
          if (fs.existsSync(path.join(process.cwd(), entryFiles[i]))) {
            pathname += entryFiles[i];
            break;
          }
        }

        if (pathname === '/') return util.return404(res, pathname);
      }

      signale.log(`REQUEST: ⏳ Delay - ${delay}ms ${req.method} ${pathname}`);

      absPath = path.join(process.cwd(), pathname);
      const ext = pathname.slice(pathname.indexOf('.'));
      const fileStream = fs.createReadStream(absPath, { encoding: 'utf-8' });

      res.writeHead(200, { 'Content-Type': util.getMimeType(ext) });
      fileStream.pipe(res);
      fileStream.on('error', err => {
        // file not found
        if (err.code === 'ENOENT') return util.return404(res, pathname);

        // otherwise send the error back
        res.writeHead(500);
        res.end(JSON.stringify(err));
      });
    });
});

server.listen(options.port, err => {
  if (err) throw Error(err);

  signale.start(`Serving Directory: ${process.cwd()}`);
  signale.watch(`Port: ${options.port}`);
});
